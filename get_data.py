import os
import zipfile
import urllib.request
import pandas as pd

data_folder = "data"
weather_data_url = "https://storage.googleapis.com/kaggle-data-sets/29/2150/compressed/GlobalLandTemperaturesByState.csv.zip?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20210221%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20210221T204614Z&X-Goog-Expires=259199&X-Goog-SignedHeaders=host&X-Goog-Signature=3f64ce7cee3dc38965638bf2e20a8acabd796566d39a75a14e36eeb7971aeb1f2228864cc28ba0dcba5a5c34a52fb96c255470399ac26baf0d9489fe46bcaea1212662496c953606d276589a860f1f71ad430ebce2fab966af657ae331809a3a5310734e267b08e6bee6c02204c7fa9f32fc1b67b603c9d91238f836405f0730fd5245a9d78ebbb897df9a8dc7d6db1bb1e068b8764347d99c3eeb1fdc0a4f0fcf8f112696feb128160c9dd73c124dd19325120ae4de3c4e430f08e8018125417c8abd14bd2ca64b30ffd4503a617845e211929dbaf0e48a490e7e6b622045e40661bcb9ada05d0ecd591a569c77fb52a2fb1b0f7ecf8f620d277f2fbd00500e"
weather_data_file = f"{data_folder}/GlobalLandTemperaturesByState.csv.zip"
weather_csv_file = f"{data_folder}/GlobalLandTemperaturesByState.csv"
demo_data_url = "https://public.opendatasoft.com/explore/dataset/us-cities-demographics/download/?format=csv&timezone=America/New_York&lang=en&use_labels_for_header=true&csv_separator=%3B"
demo_data_file = f"{data_folder}/us-cities-demographics.csv"
i94_sas_file = f"{data_folder}/i94_apr16_sub.sas7bdat"
i94_csv_file = f"{data_folder}/i94_apr16_sub.csv"
code_country_mapping_file = f"{data_folder}/code_to_country_mapping.csv"

if not os.path.exists(data_folder):
    os.makedirs(data_folder)

if not os.path.isfile(weather_data_file):
    urllib.request.urlretrieve(weather_data_url, weather_data_file)

if os.path.isfile(weather_data_file) and not os.path.isfile(weather_csv_file):
    with zipfile.ZipFile(weather_data_file, 'r') as zip_ref:
        zip_ref.extractall(data_folder)

if not os.path.isfile(demo_data_file):
    urllib.request.urlretrieve(demo_data_url, demo_data_file)

if not os.path.isfile(i94_csv_file):
    df = pd.read_sas(i94_sas_file, 'sas7bdat', encoding="ISO-8859-1")
    df.to_csv(i94_csv_file, index=False)

if not os.path.isfile(code_country_mapping_file):
    df = pd.DataFrame({'code': {0: 582, 1: 236, 2: 101, 3: 316, 4: 102, 5: 324, 6: 529, 7: 518, 8: 687, 9: 151, 10: 532, 11: 438, 12: 103, 13: 152, 14: 512, 15: 298, 16: 274, 17: 513, 18: 104, 19: 581, 20: 386, 21: 509, 22: 153, 23: 242, 24: 688, 25: 717, 26: 164, 27: 336, 28: 689, 29: 525, 30: 217, 31: 105, 32: 393, 33: 243, 34: 375, 35: 310, 36: 326, 37: 526, 38: 383, 39: 384, 40: 690, 41: 245, 42: 721, 43: 270, 44: 271, 45: 691, 46: 317, 47: 385, 48: 467, 49: 575, 50: 165, 51: 584, 52: 218, 53: 140, 54: 723, 55: 108, 56: 322, 57: 519, 58: 585, 59: 240, 60: 692, 61: 368, 62: 576, 63: 399, 64: 372, 65: 109, 66: 369, 67: 604, 68: 413, 69: 110, 70: 111, 71: 601, 72: 411, 73: 387, 74: 338, 75: 758, 76: 154, 77: 112, 78: 339, 79: 143, 80: 113, 81: 520, 82: 507, 83: 577, 84: 382, 85: 327, 86: 603, 87: 586, 88: 726, 89: 149, 90: 528, 91: 206, 92: 114, 93: 115, 94: 213, 95: 759, 96: 729, 97: 204, 98: 249, 99: 250, 100: 116, 101: 251, 102: 117, 103: 388, 104: 514, 105: 209, 106: 253, 107: 201, 108: 155, 109: 340, 110: 414, 111: 732, 112: 272, 113: 156, 114: 203, 115: 118, 116: 255, 117: 335, 118: 370, 119: 381, 120: 119, 121: 120, 122: 121, 123: 214, 124: 167, 125: 320, 126: 345, 127: 273, 128: 220, 129: 392, 130: 145, 131: 472, 132: 511, 133: 389, 134: 342, 135: 760, 136: 473, 137: 157, 138: 122, 139: 299, 140: 735, 141: 521, 142: 332, 143: 329, 144: 371, 145: 440, 146: 257, 147: 123, 148: 508, 149: 409, 150: 464, 151: 579, 152: 390, 153: 343, 154: 470, 155: 275, 156: 124, 157: 256, 158: 258, 159: 474, 160: 743, 161: 504, 162: 441, 163: 693, 164: 694, 165: 260, 166: 416, 167: 107, 168: 126, 169: 297, 170: 748, 171: 321, 172: 127, 173: 158, 174: 376, 175: 128, 176: 330, 177: 261, 178: 391, 179: 142, 180: 745, 181: 347, 182: 348, 183: 207, 184: 141, 185: 166, 186: 412, 187: 397, 188: 373, 189: 276, 190: 129, 191: 244, 192: 346, 193: 522, 194: 523, 195: 502, 196: 524, 197: 716, 198: 736, 199: 749, 200: 350, 201: 602, 202: 351, 203: 130, 204: 131, 205: 262, 206: 268, 207: 159, 208: 353, 209: 263, 210: 304, 211: 417, 212: 516, 213: 323, 214: 264, 215: 161, 216: 527, 217: 420, 218: 352, 219: 162, 220: 296, 221: 135, 222: 695, 223: 163, 224: 410, 225: 696, 226: 266, 227: 469, 228: 757, 229: 333, 230: 465, 231: 216, 232: 139, 233: 301, 234: 344, 235: 315, 236: 403, 237: 712, 238: 700, 239: 719, 240: 574, 241: 720, 242: 106, 243: 739, 244: 394, 245: 501, 246: 404, 247: 730, 248: 731, 249: 471, 250: 737, 251: 753, 252: 740, 253: 710, 254: 505, 255: 705, 256: 583, 257: 407, 258: 999, 259: 239, 260: 134, 261: 506, 262: 755, 263: 311, 264: 741, 265: 100, 266: 187, 267: 190, 268: 200, 269: 219, 270: 238, 271: 277, 272: 293, 273: 300, 274: 319, 275: 365, 276: 395, 277: 400, 278: 485, 279: 503, 280: 589, 281: 592, 282: 791, 283: 849, 284: 914, 285: 944, 286: 996}, 'country': {0: "'MEXICO Air Sea, and Not Reported (I-94, no land arrivals)'", 1: "'AFGHANISTAN'", 2: "'ALBANIA'", 3: "'ALGERIA'", 4: "'ANDORRA'", 5: "'ANGOLA'", 6: "'ANGUILLA'", 7: "'ANTIGUA-BARBUDA'", 8: "'ARGENTINA '", 9: "'ARMENIA'", 10: "'ARUBA'", 11: "'AUSTRALIA'", 12: "'AUSTRIA'", 13: "'AZERBAIJAN'", 14: "'BAHAMAS'", 15: "'BAHRAIN'", 16: "'BANGLADESH'", 17: "'BARBADOS'", 18: "'BELGIUM'", 19: "'BELIZE'", 20: "'BENIN'", 21: "'BERMUDA'", 22: "'BELARUS'", 23: "'BHUTAN'", 24: "'BOLIVIA'", 25: "'BONAIRE, ST EUSTATIUS, SABA'", 26: "'BOSNIA-HERZEGOVINA'", 27: "'BOTSWANA'", 28: "'BRAZIL'", 29: "'BRITISH VIRGIN ISLANDS'", 30: "'BRUNEI'", 31: "'BULGARIA'", 32: "'BURKINA FASO'", 33: "'BURMA'", 34: "'BURUNDI'", 35: "'CAMEROON'", 36: "'CAPE VERDE'", 37: "'CAYMAN ISLANDS'", 38: "'CENTRAL AFRICAN REPUBLIC'", 39: "'CHAD'", 40: "'CHILE'", 41: "'CHINA, PRC'", 42: "'CURACAO'", 43: "'CHRISTMAS ISLAND'", 44: "'COCOS ISLANDS'", 45: "'COLOMBIA'", 46: "'COMOROS'", 47: "'CONGO'", 48: "'COOK ISLANDS'", 49: "'COSTA RICA'", 50: "'CROATIA'", 51: "'CUBA'", 52: "'CYPRUS'", 53: "'CZECH REPUBLIC'", 54: "'FAROE ISLANDS (PART OF DENMARK)'", 55: "'DENMARK'", 56: "'DJIBOUTI'", 57: "'DOMINICA'", 58: "'DOMINICAN REPUBLIC'", 59: "'EAST TIMOR'", 60: "'ECUADOR'", 61: "'EGYPT'", 62: "'EL SALVADOR'", 63: "'EQUATORIAL GUINEA'", 64: "'ERITREA'", 65: "'ESTONIA'", 66: "'ETHIOPIA'", 67: "'FALKLAND ISLANDS'", 68: "'FIJI'", 69: "'FINLAND'", 70: "'FRANCE'", 71: "'FRENCH GUIANA'", 72: "'FRENCH POLYNESIA'", 73: "'GABON'", 74: "'GAMBIA'", 75: "'GAZA STRIP'", 76: "'GEORGIA'", 77: "'GERMANY'", 78: "'GHANA'", 79: "'GIBRALTAR'", 80: "'GREECE'", 81: "'GRENADA'", 82: "'GUADELOUPE'", 83: "'GUATEMALA'", 84: "'GUINEA'", 85: "'GUINEA-BISSAU'", 86: "'GUYANA'", 87: "'HAITI'", 88: "'HEARD AND MCDONALD IS.'", 89: "'HOLY SEE/VATICAN'", 90: "'HONDURAS'", 91: "'HONG KONG'", 92: "'HUNGARY'", 93: "'ICELAND'", 94: "'INDIA'", 95: "'INDIAN OCEAN AREAS (FRENCH)'", 96: "'INDIAN OCEAN TERRITORY'", 97: "'INDONESIA'", 98: "'IRAN'", 99: "'IRAQ'", 100: "'IRELAND'", 101: "'ISRAEL'", 102: "'ITALY'", 103: "'IVORY COAST'", 104: "'JAMAICA'", 105: "'JAPAN'", 106: "'JORDAN'", 107: "'KAMPUCHEA'", 108: "'KAZAKHSTAN'", 109: "'KENYA'", 110: "'KIRIBATI'", 111: "'KOSOVO'", 112: "'KUWAIT'", 113: "'KYRGYZSTAN'", 114: "'LAOS'", 115: "'LATVIA'", 116: "'LEBANON'", 117: "'LESOTHO'", 118: "'LIBERIA'", 119: "'LIBYA'", 120: "'LIECHTENSTEIN'", 121: "'LITHUANIA'", 122: "'LUXEMBOURG'", 123: "'MACAU'", 124: "'MACEDONIA'", 125: "'MADAGASCAR'", 126: "'MALAWI'", 127: "'MALAYSIA'", 128: "'MALDIVES'", 129: "'MALI'", 130: "'MALTA'", 131: "'MARSHALL ISLANDS'", 132: "'MARTINIQUE'", 133: "'MAURITANIA'", 134: "'MAURITIUS'", 135: "'MAYOTTE (AFRICA - FRENCH)'", 136: "'MICRONESIA, FED. STATES OF'", 137: "'MOLDOVA'", 138: "'MONACO'", 139: "'MONGOLIA'", 140: "'MONTENEGRO'", 141: "'MONTSERRAT'", 142: "'MOROCCO'", 143: "'MOZAMBIQUE'", 144: "'NAMIBIA'", 145: "'NAURU'", 146: "'NEPAL'", 147: "'NETHERLANDS'", 148: "'NETHERLANDS ANTILLES'", 149: "'NEW CALEDONIA'", 150: "'NEW ZEALAND'", 151: "'NICARAGUA'", 152: "'NIGER'", 153: "'NIGERIA'", 154: "'NIUE'", 155: "'NORTH KOREA'", 156: "'NORWAY'", 157: "'OMAN'", 158: "'PAKISTAN'", 159: "'PALAU'", 160: "'PALESTINE'", 161: "'PANAMA'", 162: "'PAPUA NEW GUINEA'", 163: "'PARAGUAY'", 164: "'PERU'", 165: "'PHILIPPINES'", 166: "'PITCAIRN ISLANDS'", 167: "'POLAND'", 168: "'PORTUGAL'", 169: "'QATAR'", 170: "'REPUBLIC OF SOUTH SUDAN'", 171: "'REUNION'", 172: "'ROMANIA'", 173: "'RUSSIA'", 174: "'RWANDA'", 175: "'SAN MARINO'", 176: "'SAO TOME AND PRINCIPE'", 177: "'SAUDI ARABIA'", 178: "'SENEGAL'", 179: "'SERBIA AND MONTENEGRO'", 180: "'SERBIA'", 181: "'SEYCHELLES'", 182: "'SIERRA LEONE'", 183: "'SINGAPORE'", 184: "'SLOVAKIA'", 185: "'SLOVENIA'", 186: "'SOLOMON ISLANDS'", 187: "'SOMALIA'", 188: "'SOUTH AFRICA'", 189: "'SOUTH KOREA'", 190: "'SPAIN'", 191: "'SRI LANKA'", 192: "'ST. HELENA'", 193: "'ST. KITTS-NEVIS'", 194: "'ST. LUCIA'", 195: "'ST. PIERRE AND MIQUELON'", 196: "'ST. VINCENT-GRENADINES'", 197: "'SAINT BARTHELEMY'", 198: "'SAINT MARTIN'", 199: "'SAINT MAARTEN'", 200: "'SUDAN'", 201: "'SURINAME'", 202: "'SWAZILAND'", 203: "'SWEDEN'", 204: "'SWITZERLAND'", 205: "'SYRIA'", 206: "'TAIWAN'", 207: "'TAJIKISTAN'", 208: "'TANZANIA'", 209: "'THAILAND'", 210: "'TOGO'", 211: "'TONGA'", 212: "'TRINIDAD AND TOBAGO'", 213: "'TUNISIA'", 214: "'TURKEY'", 215: "'TURKMENISTAN'", 216: "'TURKS AND CAICOS ISLANDS'", 217: "'TUVALU'", 218: "'UGANDA'", 219: "'UKRAINE'", 220: "'UNITED ARAB EMIRATES'", 221: "'UNITED KINGDOM'", 222: "'URUGUAY'", 223: "'UZBEKISTAN'", 224: "'VANUATU'", 225: "'VENEZUELA'", 226: "'VIETNAM'", 227: "'WALLIS AND FUTUNA ISLANDS'", 228: "'WEST INDIES (FRENCH)'", 229: "'WESTERN SAHARA'", 230: "'WESTERN SAMOA'", 231: "'YEMEN'", 232: "'YUGOSLAVIA'", 233: "'ZAIRE'", 234: "'ZAMBIA'", 235: "'ZIMBABWE'", 236: "'INVALID: AMERICAN SAMOA'", 237: "'INVALID: ANTARCTICA'", 238: "'INVALID: BORN ON BOARD SHIP'", 239: "'INVALID: BOUVET ISLAND (ANTARCTICA/NORWAY TERR.)'", 240: "'INVALID: CANADA'", 241: "'INVALID: CANTON AND ENDERBURY ISLS'", 242: "'INVALID: CZECHOSLOVAKIA'", 243: "'INVALID: DRONNING MAUD LAND (ANTARCTICA-NORWAY)'", 244: "'INVALID: FRENCH SOUTHERN AND ANTARCTIC'", 245: "'INVALID: GREENLAND'", 246: "'INVALID: GUAM'", 247: "'INVALID: INTERNATIONAL WATERS'", 248: "'INVALID: JOHNSON ISLAND'", 249: "'INVALID: MARIANA ISLANDS, NORTHERN'", 250: "'INVALID: MIDWAY ISLANDS'", 251: "'INVALID: MINOR OUTLYING ISLANDS - USA'", 252: "'INVALID: NEUTRAL ZONE (S. ARABIA/IRAQ)'", 253: "'INVALID: NON-QUOTA IMMIGRANT'", 254: "'INVALID: PUERTO RICO'", 255: "'INVALID: STATELESS'", 256: "'INVALID: UNITED STATES'", 257: "'INVALID: UNITED STATES'", 258: "'INVALID: UNKNOWN'", 259: "'INVALID: UNKNOWN COUNTRY'", 260: "'INVALID: USSR'", 261: "'INVALID: U.S. VIRGIN ISLANDS'", 262: "'INVALID: WAKE ISLAND'", 263: "'Collapsed Tanzania (should not show)'", 264: "'Collapsed Curacao (should not show)'", 265: "'No Country Code (100)'", 266: "'No Country Code (187)'", 267: "'No Country Code (190)'", 268: "'No Country Code (200)'", 269: "'No Country Code (219)'", 270: "'No Country Code (238)'", 271: "'No Country Code (277)'", 272: "'No Country Code (293)'", 273: "'No Country Code (300)'", 274: "'No Country Code (319)'", 275: "'No Country Code (365)'", 276: "'No Country Code (395)'", 277: "'No Country Code (400)'", 278: "'No Country Code (485)'", 279: "'No Country Code (503)'", 280: "'No Country Code (589)'", 281: "'No Country Code (592)'", 282: "'No Country Code (791)'", 283: "'No Country Code (849)'", 284: "'No Country Code (914)'", 285: "'No Country Code (944)'", 286: "'No Country Code (996)'"}})
    df.to_csv(code_country_mapping_file, index=False)
